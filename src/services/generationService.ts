
// Update the service to accept updated ethnicity types
export type ServiceEthnicity = 'indian' | 'american' | 'korean' | 'russian';

export type GenerationRequest = {
  imageFile: File;
  gender: 'male' | 'female';
  clothingType: string;
  ethnicity: ServiceEthnicity;
  size?: string;
  fit?: string;
  isBackView?: boolean;
  advancedOptions?: any;
};

export type GenerationResult = {
  image: string;
  isOriginal: boolean;
  message?: string;
};

const GEMINI_API_KEY = "AIzaSyBxx7menL2ghGwgmNNzLMn_IgK8F2LxlUg";

// Function to convert file to base64
const fileToBase64 = (file: File): Promise<string> => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => resolve(reader.result as string);
    reader.onerror = error => reject(error);
  });
};

// Function to generate image using Gemini API
export const generateFashionImage = async (request: GenerationRequest): Promise<GenerationResult> => {
  try {
    // Convert the uploaded image to base64
    const base64Image = await fileToBase64(request.imageFile);
    const base64Data = base64Image.split(',')[1]; // Remove the data:image/jpeg;base64, part

    // Create a detailed prompt for fashion model generation
    const prompt = `Generate a photorealistic image of a ${request.ethnicity} ${request.gender} model wearing the clothing item from the provided image. The model should be:
    - ${request.gender === 'male' ? 'A handsome male' : 'A beautiful female'} of ${request.ethnicity} ethnicity
    - Wearing the exact clothing item shown in the reference image
    - Standing in a professional fashion photography pose
    - Against a clean, neutral background suitable for fashion photography
    - With professional studio lighting
    - High quality, 4K resolution
    - Fashion photography style
    ${request.size ? `- The clothing should fit as size ${request.size}` : ''}
    ${request.fit ? `- The clothing should have a ${request.fit} fit` : ''}
    ${request.isBackView ? '- Show the back view of the model and clothing' : '- Show the front view of the model and clothing'}
    
    Make sure the generated image looks professional and suitable for e-commerce or fashion catalog use.`;

    console.log('Making API request to Gemini...');

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-preview-image-generation:generateContent?key=${GEMINI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [
          {
            parts: [
              {
                text: prompt
              },
              {
                inline_data: {
                  mime_type: request.imageFile.type,
                  data: base64Data
                }
              }
            ]
          }
        ],
        generationConfig: {
          response_modalities: ["TEXT", "IMAGE"]
        }
      })
    });

    console.log('API Response status:', response.status);

    if (!response.ok) {
      const errorData = await response.text();
      console.error('API Error Response:', errorData);
      throw new Error(`API request failed: ${response.status} ${response.statusText} - ${errorData}`);
    }

    const data = await response.json();
    console.log('API Response data:', data);
    
    // Extract the generated image from the response
    if (data.candidates && data.candidates[0] && data.candidates[0].content && data.candidates[0].content.parts) {
      for (const part of data.candidates[0].content.parts) {
        if (part.inline_data && part.inline_data.data) {
          // Convert the base64 data to a data URL
          const mimeType = part.inline_data.mime_type || 'image/png';
          const generatedImage = `data:${mimeType};base64,${part.inline_data.data}`;
          console.log('Successfully generated image');
          return {
            image: generatedImage,
            isOriginal: false
          };
        }
      }
    }

    // If no image was generated, fall back to original image
    console.warn('No image found in API response, using fallback');
    throw new Error('No image was generated by the API');
    
  } catch (error) {
    console.error('Error generating image with Gemini API:', error);
    
    // Fallback to returning the original image
    return new Promise((resolve) => {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      
      const img = new Image();
      img.onload = () => {
        canvas.width = img.width;
        canvas.height = img.height;
        
        if (ctx) {
          ctx.drawImage(img, 0, 0);
        }
        
        resolve({
          image: canvas.toDataURL(),
          isOriginal: true,
          message: 'Using original image due to generation error'
        });
      };
      
      img.onerror = () => {
        // Ultimate fallback
        canvas.width = 400;
        canvas.height = 600;
        if (ctx) {
          ctx.fillStyle = '#f0f0f0';
          ctx.fillRect(0, 0, 400, 600);
          ctx.fillStyle = '#666';
          ctx.font = '20px Arial';
          ctx.textAlign = 'center';
          ctx.fillText('Generation Failed', 200, 300);
        }
        
        resolve({
          image: canvas.toDataURL(),
          isOriginal: true,
          message: 'Generation failed, showing placeholder'
        });
      };
      
      img.src = URL.createObjectURL(request.imageFile);
    });
  }
};

// Function to get sample image URL
export const getSampleImageUrl = (): string => {
  return '/placeholder.svg';
};
